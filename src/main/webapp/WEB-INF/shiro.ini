[main]

# Let's use some in-memory caching to reduce the number of runtime lookups against a remote user store.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager


authc.loginUrl = /login.xhtml
authc.successUrl = /app/dashboard.xhtml
logout.redirectUrl = /login.xhtml

# tell shiro the ids of the username and password inputs on the login page
authc.usernameParam = loginForm:username
authc.passwordParam = loginForm:password

# configure Shiro's default 'ssl' filter to be disabled while testing
ssl.enabled = false

# configure hashService, passwordService and passwordMatcher : https://stackoverflow.com/a/49907720
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

# Configure DataSource for the JdbcRealm using Shiro's JndiObjectFactory
# source: https://stackoverflow.com/a/17452503 & https://stackoverflow.com/a/49907720
dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/DSshapp
dataSource.resourceRef = true
dataSource.requiredType = javax.sql.DataSource
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $dataSource
jdbcRealm.credentialsMatcher = $passwordMatcher

# source: https://stackoverflow.com/a/49907720
securityManager.realm = $jdbcRealm

# Configure JDBC realm SQL queries
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM users WHERE username = ?
jdbcRealm.userRolesQuery = SELECT roles.label FROM roles WHERE id = (SELECT role_id FROM users WHERE username = ?)
jdbcRealm.permissionsQuery = SELECT label FROM permissions p WHERE p.id IN (SELECT permission_id FROM roles_permissions WHERE role_id = (SELECT id FROM roles r WHERE r.label = ?));

[urls]
/ = ssl, anon
/login.xhtml = ssl, authc
/register.xhtml = ssl, anon
/logout = ssl, logout
/javax.faces.resource/** = ssl, anon

# make sure the end-user is authenticated.  If not, redirect to the 'authc.loginUrl' above,
# and after successful authentication, redirect them back to the original page they
# were trying to view:
# comment these 2 restrictions for development
# /app/** = ssl, authc
# /admin/** = ssl, authc, perms[administrator]

# comment these 2 restrictions for production
/app/** = ssl, anon
/admin/** = ssl, anon
